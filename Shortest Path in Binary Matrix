class Solution {
public:
    int x[8]={-1,-1,0,1,1,1,0,-1};
    int y[8]={0,1,1,1,0,-1,-1,-1};
    int shortest(vector<vector<int>>& v,vector<vector<bool>> &visit,int n,int m){
        queue<pair<int,pair<int,int>>> Q;
        Q.push({1,{0,0}});
        visit[0][0]=true;
        int count=0;
        while(!Q.empty()){
            int i=Q.front().second.first;
            int j=Q.front().second.second;
            count=Q.front().first;
            //cout<<i<<" "<<j<<" "<<count<<endl;
            Q.pop();
            if(i==n-1 && j==m-1){
                return count;
            }
            for(int k=0;k<8;k++){
                int I=i+x[k];
                int J=j+y[k];
                if(I>=0 && I<n && J>=0 && J<m && v[I][J]==0 && !visit[I][J]){
                    Q.push({count+1,{I,J}});
                    visit[I][J]=true;
                }
            }
        }
        return -1;
    }
    
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        if((n==0 && m==0) || grid[0][0]==1 || grid[n-1][m-1]==1){
            return -1;
        }
        vector<vector<bool>> visit(n,vector<bool>(m,false));
        return shortest(grid,visit,n,m);
    }
};
