/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* root){
        ListNode* t1=NULL;
        ListNode* t2=NULL;
        while(root){
            t2=root->next;
            root->next=t1;
            t1=root;
            root=t2;
        }
        return t1;
    }
    
    bool isPalindrome(ListNode* head) {
        if(!head){
            return true;
        }
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next && fast->next->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        fast=slow->next;
        slow->next=NULL;
        slow=reverse(fast);
        fast=head;
        while(fast && slow){
            if(fast->val!=slow->val){
                return false;
            }
            fast=fast->next;
            slow=slow->next;
        }
        return true;
    }
};
