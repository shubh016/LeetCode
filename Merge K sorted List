/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* temp1=NULL;
        ListNode* temp2=NULL;
        int i=0,n=lists.size();
        if(n==0)
            return NULL;
        while(i<n)
        {
            while(!temp1 && i<n)
            {
                temp1=lists[i];
                i++;
            }
            while(!temp2 && i<n)
            {
                temp2=lists[i];
                i++;
            }
            if(!temp1)
                return temp2;
            if(!temp2)
                return temp1;
            ListNode* newnode=new ListNode(0);
            ListNode* temp=newnode;
            if(temp1->val >= temp2->val)
            {
                temp->next=temp2;
                temp2=temp2->next;
                temp=temp->next;
            }
            else
            {
                temp->next=temp1;
                temp1=temp1->next;
                temp=temp->next;
            }
            while(temp1 && temp2)
            {
                if(temp1->val >= temp2->val)
                {
                    temp->next=temp2;
                    temp2=temp2->next;
                    temp=temp->next;
                }
                else if(temp1->val < temp2->val)
                {
                    temp->next=temp1;
                    temp1=temp1->next;
                    temp=temp->next;
                }     
            }
            if(temp1)
                temp->next=temp1;
            if(temp2)
                temp->next=temp2;
            temp1=newnode->next;
            temp2=NULL;
        }
        return temp1;
    }
};
