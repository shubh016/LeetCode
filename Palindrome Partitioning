class Solution {
public:
    bool ispalindrome(string str){
        int n=str.size()-1;
        if(n==0)
            return true;
        for(int i=0;i<=n/2;i++){
            if(str[i]!=str[n-i])
                return false;
        }
        return true;
    }    
    
    void fill(set<vector<string>> &st,vector<string> &v1,int row,string &s,int n){
        if(row==n){
            st.insert(v1);
        }
        for(int i=row;i<n;i++){
            if(ispalindrome(s.substr(row,i-row+1))){
                v1.push_back(s.substr(row,i-row+1));
                fill(st,v1,i+1,s,n);
                v1.pop_back();
            }
        }
    }
    
    vector<vector<string>> partition(string s) {
        vector<vector<string>> v;
        vector<string> v1;
        set<vector<string>> st;
        int n=s.size();
        int ch=1;
        fill(st,v1,0,s,n);
        for(auto i : st)
            v.push_back(i);
        return v;
    }
};
