class Solution {
public:
    bool check(map<int,vector<int>> &mp,vector<int> &colour,int cur){
        queue<int> Q;
        Q.push(cur);
        colour[cur]=1;
        while(!Q.empty()){
            int curr=Q.front();
            Q.pop();
            for(int i=0;i<mp[curr].size();i++){
                if(colour[curr]==colour[mp[curr][i]]){
                    return false;
                }
                if(colour[mp[curr][i]]==-1){
                    colour[mp[curr][i]]=1-colour[curr];
                    Q.push(mp[curr][i]);
                }
            }
        }
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph) {
        int edge=graph.size();
        map<int,vector<int>> adj;
        for(int i=0;i<edge;i++){
            for(int j=0;j<graph[i].size();j++){
                adj[i].push_back(graph[i][j]);
            }
        }
        vector<int> colour(edge,-1);
        for(int i=0;i<edge;i++){
            if(colour[i]==-1){
                if(!check(adj,colour,i)){
                    return false;
                }
            }
        }
        return true;
    }
};
