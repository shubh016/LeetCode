class Solution {
public:
    int left(vector<int>& nums, int target,int low,int high)
    {
        int mid=low+(high-low)/2;
        while(low<=high)
        {
            mid=low+(high-low)/2;
            if((mid==0 || nums[mid-1] < target) && nums[mid]==target)
                return mid;
            else if(nums[mid] < target)
                low=mid+1;
            else
                high=mid-1;
        }
        return -1;
    }
    
    int right(vector<int>& nums, int target,int low,int high)
    {
        int n=nums.size();
        int mid=low+(high-low)/2;
        while(low<=high)
        {
            mid=low+(high-low)/2;
            if((mid==n-1 || nums[mid+1] > target) && nums[mid]==target)
                return mid;
            else if(nums[mid] > target)
                high=mid-1;
            else
                low=mid+1;
        }
        return -1;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0,high=n-1;
        //int mid=low+(high-low)/2;
        int lt=left(nums,target,low,high);
        int rt=right(nums,target,low,high);
        vector<int> v;
        //find(nums,left,right,target,0,nums.size()-1);
        v.push_back(lt);
        v.push_back(rt);
        return v;
    }
};
