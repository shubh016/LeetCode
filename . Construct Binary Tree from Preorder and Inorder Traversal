/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int find(vector<int> &in,int low,int high,int target){
        for(int i=low;i<=high;i++)
            if(in[i]==target)
                return i;
        return 0;
    }
    
    TreeNode* build(int low,int high,vector<int> &pre,vector<int> &in,int &i){
        if(low>high)
            return NULL;
        TreeNode* newnode=new TreeNode(pre[i++]);
        if(low==high)
            return newnode;
        int index=find(in,low,high,newnode->val);
        newnode->left=build(low,index-1,pre,in,i);
        newnode->right=build(index+1,high,pre,in,i);
        return newnode;
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int i=0;
        return build(0,inorder.size()-1,preorder,inorder,i);
    }
};
